// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  avatar    String?
  location  String?
  role      Role     @default(USER)
  signature String?  // Added for vBulletin/phpBB style
  postCount Int      @default(0)  // Added to track post count
  joinDate  DateTime @default(now())
  isActive  Boolean  @default(true)  // For banning users
  lastLogin DateTime?  // Track last login
  ipAddress String?  // Track IP for admin purposes

  threads         Thread[]
  posts           Post[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  notifications   Notification[]
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  // Added description for category
  order       Int      @default(0)  // For ordering categories
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  subjects    Subject[]
}

model Subject {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  // Added description for subject
  icon        String?  // For subject icon
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  threads     Thread[]
  threadCount Int      @default(0)  // Counter for threads
  postCount   Int      @default(0)  // Counter for posts
  lastPost    DateTime?  // Track last post time
  lastPostUserId Int?  // Track last poster
}

model Thread {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  subjectId   Int
  subject     Subject  @relation(fields: [subjectId], references: [id])
  posts       Post[]
  locked      Boolean  @default(false)
  sticky      Boolean  @default(false)  // For pinned threads
  viewCount   Int      @default(0)  // Track view count
  lastPostAt  DateTime @default(now())  // Track last post time
  lastPostUserId Int?  // Track last poster
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  threadId  Int
  user      User     @relation(fields: [userId], references: [id])
  thread    Thread   @relation(fields: [threadId], references: [id])
  replyToId Int?
  replyTo   Post?    @relation("ReplyTo", fields: [replyToId], references: [id])
  replies   Post[]   @relation("ReplyTo")
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  senderId    Int
  recipientId Int
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  read      Boolean  @default(false)
}
