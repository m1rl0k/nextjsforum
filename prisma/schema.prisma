generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  password                String
  username                String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  bio                     String?
  avatar                  String?
  location                String?
  signature               String?
  website                 String?
  birthday                DateTime?
  displayName             String?
  role                    Role                     @default(USER)
  isActive                Boolean                  @default(true)
  isBanned                Boolean                  @default(false)
  banReason               String?
  banExpiresAt            DateTime?
  emailVerified           Boolean                  @default(false)
  postCount               Int                      @default(0)
  threadCount             Int                      @default(0)
  reputationPoints        Int                      @default(0)
  warningPoints           Int                      @default(0)
  joinDate                DateTime                 @default(now())
  lastLogin               DateTime?
  lastActivity            DateTime?
  ipAddress               String?
  timezone                String                   @default("UTC")
  language                String                   @default("en")
  emailNotifications      Boolean                  @default(true)
  showOnline              Boolean                  @default(true)
  moderationLogs          ModerationLog[]          @relation("ModeratorLogs")
  posts                   Post[]
  reactions               PostReaction[]
  reportedBy              Report[]                 @relation("ReportedBy")
  resolvedReports         Report[]                 @relation("ResolvedBy")
  reports                 Report[]
  moderatedSubjects       SubjectModerator[]
  threads                 Thread[]
  subscriptions           ThreadSubscription[]
  userGroups              UserGroupMember[]
  receivedMessages        Message[]                @relation("ReceivedMessages")
  sentMessages            Message[]                @relation("SentMessages")
  notificationPreferences NotificationPreferences?
  triggeredNotifications  Notification[]           @relation("TriggeredNotifications")
  notifications           Notification[]
  uploadedImages          Image[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subjects    Subject[]
}

model Subject {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  icon             String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  order            Int                @default(0)
  isActive         Boolean            @default(true)
  requiresApproval Boolean            @default(false)
  canPost          Boolean            @default(true)
  canReply         Boolean            @default(true)
  guestPosting     Boolean            @default(false)
  threadCount      Int                @default(0)
  postCount        Int                @default(0)
  lastPost         DateTime?
  lastPostUserId   Int?
  lastThreadId     Int?
  slug             String?
  metaDescription  String?
  categoryId       Int
  category         Category           @relation(fields: [categoryId], references: [id])
  moderators       SubjectModerator[]
  threads          Thread[]

  @@index([categoryId, order])
  @@index([slug])
}

model Thread {
  id              Int                  @id @default(autoincrement())
  title           String
  content         String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  locked          Boolean              @default(false)
  sticky          Boolean              @default(false)
  approved        Boolean              @default(true)
  deleted         Boolean              @default(false)
  deletedAt       DateTime?
  deletedBy       Int?
  viewCount       Int                  @default(0)
  postCount       Int                  @default(0)
  replyCount      Int                  @default(0)
  lastPostAt      DateTime             @default(now())
  lastPostUserId  Int?
  threadType      ThreadType           @default(NORMAL)
  allowReplies    Boolean              @default(true)
  requireApproval Boolean              @default(false)
  slug            String?
  metaDescription String?
  tags            String?
  userId          Int
  subjectId       Int
  posts           Post[]
  reports         Report[]
  subject         Subject              @relation(fields: [subjectId], references: [id])
  user            User                 @relation(fields: [userId], references: [id])
  subscriptions   ThreadSubscription[]
  images          ThreadImage[]

  @@index([subjectId, sticky, lastPostAt])
  @@index([userId])
  @@index([slug])
}

model Post {
  id            Int            @id @default(autoincrement())
  content       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  approved      Boolean        @default(true)
  deleted       Boolean        @default(false)
  deletedAt     DateTime?
  deletedBy     Int?
  editedAt      DateTime?
  editedBy      Int?
  editReason    String?
  isFirstPost   Boolean        @default(false)
  postNumber    Int?
  contentRaw    String?
  contentHtml   String?
  attachments   String?
  userPostCount Int?
  userJoinDate  DateTime?
  userLocation  String?
  ipAddress     String?
  userAgent     String?
  userId        Int
  threadId      Int
  replyToId     Int?
  replyTo       Post?          @relation("ReplyTo", fields: [replyToId], references: [id])
  replies       Post[]         @relation("ReplyTo")
  thread        Thread         @relation(fields: [threadId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  reactions     PostReaction[]
  reports       Report[]
  images        PostImage[]

  @@index([threadId, postNumber])
  @@index([userId])
  @@index([createdAt])
}

model Message {
  id             Int                @id @default(autoincrement())
  subject        String?
  content        String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  isRead         Boolean            @default(false)
  isDeleted      Boolean            @default(false)
  deletedAt      DateTime?
  priority       MessagePriority    @default(NORMAL)
  conversationId String?
  replyToId      Int?
  attachments    String?
  contentType    MessageContentType @default(TEXT)
  senderId       Int
  recipientId    Int
  recipient      User               @relation("ReceivedMessages", fields: [recipientId], references: [id])
  replyTo        Message?           @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]          @relation("MessageReplies")
  sender         User               @relation("SentMessages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId, createdAt])
  @@index([recipientId, createdAt])
  @@map("messages")
}

model Notification {
  id            Int                  @id @default(autoincrement())
  title         String
  content       String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  read          Boolean              @default(false)
  readAt        DateTime?
  type          NotificationType
  priority      NotificationPriority @default(NORMAL)
  actionUrl     String?
  actionData    String?
  relatedType   String?
  relatedId     Int?
  triggeredById Int?
  userId        Int
  triggeredBy   User?                @relation("TriggeredNotifications", fields: [triggeredById], references: [id])
  user          User                 @relation(fields: [userId], references: [id])

  @@index([userId, read])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("notifications")
}

model SiteSettings {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String?
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isInstalled Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ThemeSettings {
  id                       Int      @id @default(autoincrement())
  siteName                 String   @default("NextJS Forum")
  logoUrl                  String?
  faviconUrl               String?  @default("/favicon.ico")
  siteDescription          String?  @default("A modern forum built with Next.js")
  footerText               String?  @default("Powered by NextJS Forum")
  primaryColor             String   @default("#2B4F81")
  secondaryColor           String   @default("#4C76B2")
  backgroundColor          String   @default("#E0E8F5")
  textColor                String   @default("#000000")
  linkColor                String   @default("#006699")
  linkHoverColor           String   @default("#0088CC")
  headerBackground         String   @default("#2B4F81")
  headerText               String   @default("#FFFFFF")
  navbarBackground         String   @default("#4C76B2")
  navbarText               String   @default("#FFFFFF")
  categoryHeaderBackground String   @default("#738FBF")
  categoryHeaderText       String   @default("#FFFFFF")
  subjectHeaderBackground  String   @default("#DEE4F2")
  subjectHeaderText        String   @default("#000000")
  threadBackground         String   @default("#FFFFFF")
  threadAltBackground      String   @default("#F5F5FF")
  threadHoverBackground    String   @default("#E8EFFD")
  postHeaderBackground     String   @default("#DEE4F2")
  postBodyBackground       String   @default("#FFFFFF")
  postFooterBackground     String   @default("#F5F5FF")
  sidebarBackground        String   @default("#E0E8F5")
  borderColor              String   @default("#94A3C4")
  buttonBackground         String   @default("#4C76B2")
  buttonText               String   @default("#FFFFFF")
  buttonHoverBackground    String   @default("#0088CC")
  inputBackground          String   @default("#FFFFFF")
  inputText                String   @default("#000000")
  inputBorderColor         String   @default("#94A3C4")
  buttonRadius             String   @default("0px")
  cardRadius               String   @default("0px")
  fontSize                 String   @default("13px")
  fontFamily               String   @default("Verdana, Arial, sans-serif")
  enableDarkMode           Boolean  @default(false)
  compactMode              Boolean  @default(false)
  showAvatars              Boolean  @default(true)
  showSignatures           Boolean  @default(true)
  threadsPerPage           Int      @default(20)
  postsPerPage             Int      @default(10)
  customCSS                String?
  isActive                 Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model InstallationStatus {
  id               Int       @id @default(autoincrement())
  isInstalled      Boolean   @default(false)
  installationStep Int       @default(0)
  dbConfigured     Boolean   @default(false)
  adminCreated     Boolean   @default(false)
  siteConfigured   Boolean   @default(false)
  forumsCreated    Boolean   @default(false)
  installationDate DateTime?
  version          String    @default("1.0.0")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model UserGroup {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  description     String?
  color           String?
  isDefault       Boolean           @default(false)
  priority        Int               @default(0)
  canPost         Boolean           @default(true)
  canReply        Boolean           @default(true)
  canEdit         Boolean           @default(false)
  canDelete       Boolean           @default(false)
  canModerate     Boolean           @default(false)
  canAdmin        Boolean           @default(false)
  canViewProfiles Boolean           @default(true)
  canSendMessages Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  members         UserGroupMember[]
}

model UserGroupMember {
  id       Int       @id @default(autoincrement())
  userId   Int
  groupId  Int
  joinedAt DateTime  @default(now())
  group    UserGroup @relation(fields: [groupId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@unique([userId, groupId])
}

model SubjectModerator {
  id         Int      @id @default(autoincrement())
  userId     Int
  subjectId  Int
  assignedAt DateTime @default(now())
  assignedBy Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, subjectId])
}

model ThreadSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int
  createdAt DateTime @default(now())
  thread    Thread   @relation(fields: [threadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, threadId])
}

model PostReaction {
  id        Int          @id @default(autoincrement())
  userId    Int
  postId    Int
  type      ReactionType
  createdAt DateTime     @default(now())
  post      Post         @relation(fields: [postId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Report {
  id             Int          @id @default(autoincrement())
  reason         String
  description    String?
  status         ReportStatus @default(PENDING)
  threadId       Int?
  postId         Int?
  userId         Int?
  reportedById   Int
  resolvedAt     DateTime?
  resolvedBy     Int?
  resolution     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  post           Post?        @relation(fields: [postId], references: [id])
  reportedBy     User         @relation("ReportedBy", fields: [reportedById], references: [id])
  resolvedByUser User?        @relation("ResolvedBy", fields: [resolvedBy], references: [id])
  thread         Thread?      @relation(fields: [threadId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])
}

model ModerationLog {
  id          Int      @id @default(autoincrement())
  moderatorId Int
  action      String
  targetType  String
  targetId    Int
  reason      String
  details     String?
  createdAt   DateTime @default(now())
  moderator   User     @relation("ModeratorLogs", fields: [moderatorId], references: [id], onDelete: Cascade)
}

model ModerationSettings {
  id                   Int      @id @default(autoincrement())
  requireApproval      Boolean  @default(false)
  newUserPostCount     Int      @default(5)
  autoModeration       Boolean  @default(false)
  profanityFilter      Boolean  @default(false)
  spamDetection        Boolean  @default(false)
  linkModeration       Boolean  @default(false)
  imageModeration      Boolean  @default(false)
  reportThreshold      Int      @default(3)
  autoLockReports      Boolean  @default(false)
  moderationQueue      Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  bannedWords          String?
  allowedDomains       String?
  trustedUserPostCount Int      @default(50)
  autoApproveImages    Boolean  @default(false)
  maxLinksPerPost      Int      @default(3)
  minPostLength        Int      @default(10)
  maxPostLength        Int      @default(10000)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("moderation_settings")
}

model NotificationPreferences {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  emailThreadReply   Boolean  @default(true)
  emailPostReply     Boolean  @default(true)
  emailMentions      Boolean  @default(true)
  emailMessages      Boolean  @default(true)
  emailModeration    Boolean  @default(true)
  emailSystem        Boolean  @default(true)
  browserThreadReply Boolean  @default(true)
  browserPostReply   Boolean  @default(true)
  browserMentions    Boolean  @default(true)
  browserMessages    Boolean  @default(true)
  browserModeration  Boolean  @default(true)
  browserSystem      Boolean  @default(true)
  emailDigest        Boolean  @default(false)
  digestFrequency    String   @default("daily")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  @@map("notification_preferences")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum ThreadType {
  NORMAL
  ANNOUNCEMENT
  STICKY
  POLL
}

enum ReactionType {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  ANGRY
  SAD
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum NotificationType {
  THREAD_REPLY
  POST_REPLY
  POST_MENTION
  POST_LIKE
  THREAD_SUBSCRIBE
  PRIVATE_MESSAGE
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  MODERATION_ACTION
  SYSTEM_ALERT
  WARNING_RECEIVED
  REPUTATION_CHANGE
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageContentType {
  TEXT
  HTML
  MARKDOWN
}

model Image {
  id           Int           @id @default(autoincrement())
  filename     String        @unique
  originalName String
  url          String
  size         Int
  mimeType     String
  uploadedAt   DateTime      @default(now())
  uploadedBy   Int
  isOrphaned   Boolean       @default(true)
  user         User          @relation(fields: [uploadedBy], references: [id])
  postImages   PostImage[]
  threadImages ThreadImage[]

  @@index([uploadedBy])
  @@index([isOrphaned])
  @@index([uploadedAt])
}

model PostImage {
  id      Int   @id @default(autoincrement())
  postId  Int
  imageId Int
  post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  image   Image @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([postId, imageId])
}

model ThreadImage {
  id       Int    @id @default(autoincrement())
  threadId Int
  imageId  Int
  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  image    Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([threadId, imageId])
}
